import numpy as np
import nltk
from nltk.corpus import wordnet as wn
import pandas as pd



def convert_tag(tag):
    """Convert the tag given by nltk.pos_tag to the tag used by wordnet.synsets
    
    Example:
        Convert: 'NNP'
        to: 'n'
    """
    tag_dict = {'N': 'n', 'J': 'a', 'R': 'r', 'V': 'v'}
    try:
        return tag_dict[tag[0]]
    except KeyError:
        return None

def doc_to_synsets(doc):
    """
    Synset is a special kind of a simple interface that is present in NLTK to look up words in WordNet.
    Synset instances are the groupings of synonymous words that express the same concept.
    Some of the words have only one Synset and some have several.

    Returns a list of synsets in document.

    Tokenizes and tags the words in the document doc.
    Then finds the first synset for each word/tag combination.
    If a synset is not found for that combination it is skipped.
    
    Args:
        doc: string to be converted

    Returns:
        list of synsets

    Example:
        doc_to_synsets('Fish are nvqjp friends.')
        Out: [Synset('fish.n.01'), Synset('be.v.01'), Synset('friend.n.01')]
    """
    
    # Convert a string to NLTK tokens
    tokens = nltk.word_tokenize(doc)

    # POS Tagging (Parts of Speech Tagging) tags words with their respective figures of speech.
    pos_tags = nltk.pos_tag(tokens)

    # Now we use previously defined convert_tag function to convert each NLTK POS tag to a synset readable format.
    wn_tags = [convert_tag(x[1]) for x in pos_tags]

    # If there is nothing in the synset for the token, it must be skipped! Therefore check that len of the synset is > 0!
    # Will return a list of lists of synsets - one list for each token!
    # Remember to use only the first match for each token! Hence wn.synsets(x,y)[0]!
    synset_list = [wn.synsets(x,y)[0] for x,y in zip(tokens, wn_tags) if len(wn.synsets(x,y))>0]
    return synset_list

def similarity_score(s1, s2):
    """
    Calculate the normalized similarity score of s1 onto s2

    For each synset in s1, finds the synset in s2 with the largest similarity value.
    Sum of all of the largest similarity values and normalize this value by dividing it by the
    number of largest similarity values found.

    Args:
        s1, s2: list of synsets from doc_to_synsets

    Returns:
        normalized similarity score of s1 onto s2

    Example:
        synsets1 = doc_to_synsets('I like cats')
        synsets2 = doc_to_synsets('I like dogs')
        similarity_score(synsets1, synsets2)
        Out: 0.73333333333333339
    """
    
    max_sim = []
    for syn in s1:
        sim = [syn.path_similarity(x) for x in s2 if syn.path_similarity(x) is not None]
        if sim:
            max_sim.append(max(sim))

    return np.mean(max_sim)


def document_path_similarity(doc1, doc2):
    """Finds the symmetrical similarity between doc1 and doc2"""

    synsets1 = doc_to_synsets(doc1)
    synsets2 = doc_to_synsets(doc2)

    return (similarity_score(synsets1, synsets2) + similarity_score(synsets2, synsets1)) / 2


def test_document_path_similarity():
    doc1 = 'This is a function to test document_path_similarity.'
    doc2 = 'Use this function to see if your code in doc_to_synsets \
    and similarity_score is correct!'
    return document_path_similarity(doc1, doc2)
